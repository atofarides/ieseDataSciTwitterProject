coefficient = as.numeric(leastEfficientPDist))
View(leastEfficientPDist.data)
leastEfficientPDur.data = data.frame(flight = names(leastEfficientPDur),
coefficient = as.numeric(leastEfficientPDur))
mostEfficientPDist.data = data.frame(flight = names(mostEfficientPDist),
coefficient = as.numeric(mostEfficientPDist))
mostEfficientPDur.data = data.frame(flight = names(mostEfficientPDur),
coefficient = as.numeric(mostEfficientPDur))
View(mod)
summary(mod)
help(vlookup)
summary(data)
str(data)
departure = data$cityFrom[match(flight,data$codes)]
departure = data$cityFrom[match(names(leastEfficientPDist),data$codes)]
leastEfficientPDist.data = data.frame(flight = names(leastEfficientPDist),
leastEfficientPDist.data = data.frame(flight = names(leastEfficientPDist),
departure = data$cityFrom[match(names(leastEfficientPDist),data$codes)]
departure = data$cityFrom[match(names(leastEfficientPDist),data$codes)]
leastEfficientPDist.data = data.frame(flight = names(leastEfficientPDist),
coefficient = as.numeric(leastEfficientPDist),
departure = data$cityFrom[match(names(leastEfficientPDist),data$codes)])
View(leastEfficientPDist.data)
View(leastEfficientPDist.data)
leastEfficientPDist.data = data.frame(flight = names(leastEfficientPDist),
coefficient = as.numeric(leastEfficientPDist),
departure = data$cityFrom[match(names(leastEfficientPDist),data$codes)],
destination = data$cityTo[match(names(leastEfficientPDist),data$codes)])
leastEfficientPDur.data = data.frame(flight = names(leastEfficientPDur),
coefficient = as.numeric(leastEfficientPDur),
departure = data$cityFrom[match(names(leastEfficientPur),data$codes)],
destination = data$cityTo[match(names(leastEfficientPDur),data$codes)])
leastEfficientPDur.data = data.frame(flight = names(leastEfficientPDur),
coefficient = as.numeric(leastEfficientPDur),
departure = data$cityFrom[match(names(leastEfficientPDur),data$codes)],
destination = data$cityTo[match(names(leastEfficientPDur),data$codes)])
mostEfficientPDist.data = data.frame(flight = names(mostEfficientPDist),
coefficient = as.numeric(mostEfficientPDist),
departure = data$cityFrom[match(names(mostEfficientPDist),data$codes)],
destination = data$cityTo[match(names(mostEfficientPDist),data$codes)])
mostEfficientPDur.data = data.frame(flight = names(mostEfficientPDur),
coefficient = as.numeric(mostEfficientPDur),
departure = data$cityFrom[match(names(mostEfficientPDur),data$codes)],
destination = data$cityTo[match(names(mostEfficientPDur),data$codes)])
library(xlsx)
install.packages("xlsx")
library(xlsx)
install.packages("xlsx")
library("xlsx")
install.packages("dplyr")
library(dplyr)
results = as.list.data.frame(leastEfficientPDist.data,leastEfficientPDur.data,mostEfficientPDist.data,mostEfficientPDur.data)
bind_rows(results)
resultsList = as.list.data.frame(leastEfficientPDist.data,leastEfficientPDur.data,mostEfficientPDist.data,mostEfficientPDur.data)
library(dplyr)
resultsCombined = bind_rows(resultsList)
View(resultsList)
resultsList = as.list(leastEfficientPDist.data,leastEfficientPDur.data,mostEfficientPDist.data,mostEfficientPDur.data)
View(resultsList)
resultsList = list(leastEfficientPDist.data,leastEfficientPDur.data,mostEfficientPDist.data,mostEfficientPDur.data)
View(resultsList)
resultsList = c(leastEfficientPDist.data,leastEfficientPDur.data,mostEfficientPDist.data,mostEfficientPDur.data)
View(resultsList)
resultsList
write.csv(leastEfficientPDist.data,file="c:/Users/anton/OneDrive/Documents/IESE/Term 5 Courses/AMORE/Volotea/resultsPDist.csv",row.names = FALSE)
write.csv(leastEfficientPDur.data,file="c:/Users/anton/OneDrive/Documents/IESE/Term 5 Courses/AMORE/Volotea/resultsPDur.csv",row.names = FALSE)
data = read.csv(file="c:/Users/anton/OneDrive/Documents/IESE/Term 5 Courses/AMORE/Volotea/data.csv", header=TRUE, stringsAsFactors=FALSE)
str(data)
# Linear regression on price / distance
fm = price.distance ~ codes
mod = lm(formula = fm, data = data)
summary(mod)
coefficients = coefficients(mod)
hist(coefficients)
leastEfficientPDist = as.list(sort(coefficients))
names(leastEfficientPDist) = substring(names(leastEfficientPDist),first = 6)
fm1 = price.duration ~ codes
mod1 = lm(formula = fm1, data = data)
summary(mod1)
coefficients1 = coefficients(mod1)
hist(coefficients1)
leastEfficientPDur = as.list(sort(coefficients1))
names(leastEfficientPDur) = substring(names(leastEfficientPDur),first = 6)
leastEfficientPDist.data = data.frame(flight = names(leastEfficientPDist),
coefficient = as.numeric(leastEfficientPDist),
departure = data$cityFrom[match(names(leastEfficientPDist),data$codes)],
destination = data$cityTo[match(names(leastEfficientPDist),data$codes)])
leastEfficientPDur.data = data.frame(flight = names(leastEfficientPDur),
coefficient = as.numeric(leastEfficientPDur),
departure = data$cityFrom[match(names(leastEfficientPDur),data$codes)],
destination = data$cityTo[match(names(leastEfficientPDur),data$codes)])
write.csv(leastEfficientPDist.data,file="c:/Users/anton/OneDrive/Documents/IESE/Term 5 Courses/AMORE/Volotea/resultsPDist.csv",row.names = FALSE)
write.csv(leastEfficientPDur.data,file="c:/Users/anton/OneDrive/Documents/IESE/Term 5 Courses/AMORE/Volotea/resultsPDur.csv",row.names = FALSE)
# OTP
data = read.csv(file="C:/Users/anton/OneDrive/Documents/IESE/Term 5 Courses/AMORE/Volotea/1a. Volotea OTP 2017 - SUMMER", header=TRUE, stringsAsFactors=FALSE)
# OTP
data = read.csv(file="C:/Users/anton/OneDrive/Documents/IESE/Term 5 Courses/AMORE/Volotea/1a. Volotea OTP 2017 - SUMMER.csv", header=TRUE, stringsAsFactors=FALSE)
str(data)
# Route
data$DEPARR = gsub(" ", "", paste(data$DEP, data$ARR))
# Total Delay Time
DELDEPHR = as.numeric(substr(data$TOT.DEL.DEP, 1, 2))
DELDEPHR[is.na(DELDEPHR)] = 0
DELDEPMIN = as.numeric(substr(data$TOT.DEL.DEP, 4, 5))
DELDEPMIN[is.na(DELDEPMIN)] = 0
data$TOT.DEL.DEP.MIN = DELDEPHR * 60 + DELDEPMIN
DELARRHR = as.numeric(substr(data$TOT.DEL.ARR, 1, 2))
DELARRHR[is.na(DELARRHR)] = 0
DELARRMIN = as.numeric(substr(data$TOT.DEL.ARR, 4, 5))
DELARRMIN[is.na(DELARRMIN)] = 0
data$TOT.DEL.ARR.MIN = DELARRHR * 60 + DELARRMIN
data$TOT.DEL.MIN = data$TOT.DEL.DEP.MIN + data$TOT.DEL.ARR.MIN
# Date format
library(lubridate)
install.packages(lubridate)
install.packadata$ATD.DATE = dmy(data$ATD.DATE)
install.packages("lubridate")
# Date format
library(lubridate)
install.packadata$ATD.DATE = dmy(data$ATD.DATE)
data$ATD.DATE = dmy(data$ATD.DATE)
data$MON = month(data$ATD.DATE)
data$ATD.DATE = dmy(data$ATD.DATE)
str(data)
names(data)
data$誰..ATD.DATE = dmy(data$誰..ATD.DATE)
data$MON = month(data$誰..ATD.DATE)
# DELAY Y/N
for (i in 1:nrow(data))
if(data$TOT.DEL.MIN[i] > 0) {
data$IF.DEL[i] = as.character(1)
} else {
data$IF.DEL[i] = 0
}
data$IF.DEL[is.na(data$IF.DEL)] = 0
# DELAY > 2HR Y/N
for (i in 1:nrow(data))
if(data$TOT.DEL.MIN[i] > 120) {
data$IF.DEL2HR[i] = as.character(1)
} else {
data$IF.DEL2HR[i] = 0
}
data$IF.DEL2HR[is.na(data$IF.DEL)] = 0
# Convert Del code to character
data$DEL1 = as.character(data$DEL1)
data$DEL2 = as.character(data$DEL2)
str(data)
# Linear Regression
fm = IF.DEL ~ MON + ACTYPE + FLT
mod = lm(formula = fm, data = data)
summary(mod)
data$MON = as.character(month(data$誰..ATD.DATE))
# DELAY Y/N
for (i in 1:nrow(data))
if(data$TOT.DEL.MIN[i] > 0) {
data$IF.DEL[i] = as.character(1)
} else {
data$IF.DEL[i] = 0
}
data$IF.DEL[is.na(data$IF.DEL)] = 0
# DELAY > 2HR Y/N
for (i in 1:nrow(data))
if(data$TOT.DEL.MIN[i] > 120) {
data$IF.DEL2HR[i] = as.character(1)
} else {
data$IF.DEL2HR[i] = 0
}
data$IF.DEL2HR[is.na(data$IF.DEL)] = 0
# Convert Del code to character
data$DEL1 = as.character(data$DEL1)
data$DEL2 = as.character(data$DEL2)
str(data)
# Linear Regression
fm = IF.DEL ~ MON + ACTYPE + FLT
mod = lm(formula = fm, data = data)
summary(mod)
fm = IF.DEL2HR ~ MON + ACTYPE + FLT
mod = lm(formula = fm, data = data)
summary(mod)
data2017 = read.csv(file="c:/Users/anton/OneDrive/Documents/IESE/Term 5 Courses/AMORE/Volotea/1a. Volotea OTP 2017 - SUMMER.csv", header=TRUE, stringsAsFactors=FALSE)
data2018 = read.csv(file="c:/Users/anton/OneDrive/Documents/IESE/Term 5 Courses/AMORE/Volotea/1b. Volotea OTP 2018 - SUMMER.csv", header=TRUE, stringsAsFactors=FALSE)
data = rbind.data.frame(data2017,data2018,make.row.names = FALSE, stringsAsFactors = FALSE)
data2018 = read.csv(file="c:/Users/anton/OneDrive/Documents/IESE/Term 5 Courses/AMORE/Volotea/1b. Volotea OTP 2018 - SUMMER.csv", header=TRUE, stringsAsFactors=FALSE)
str(data2018)
costATG = c(80, 400, 1230, 4040, 7980, 12800, 25030, 40550, 59200)
data2018 = read.csv(file="c:/Users/anton/OneDrive/Documents/IESE/Term 5 Courses/AMORE/Volotea/1b. Volotea OTP 2018 - SUMMER.csv", header=TRUE, stringsAsFactors=FALSE)
str(data2018)
flightsType1 <- data2018$DEP!=c("ACE","FUE","LPA","TFS")
flightsType1 <- data2018$DEP!="ACE"
flightsType1 <- data2018$DEP!=c("ACE","FUE","LPA","TFS")
flightsType1 <- data2018[!(data2018$DEP!="ACE"&data2018$DEP!="FUE"&data2018$DEP!="LPA"&data2018$DEP!="TFS"),]
flightsType1 <- data2018[(data2018$DEP!="ACE"&data2018$DEP!="FUE"&data2018$DEP!="LPA"&data2018$DEP!="TFS"),]
flightsType1 <- data2018[(data2018$DEP!="ACE"&data2018$DEP!="FUE"&data2018$DEP!="LPA"&data2018$DEP!="TFS"&data2018$TOT.DEL.ARR>=02:00),]
flightsType1 <- data2018[(data2018$DEP!="ACE"&data2018$DEP!="FUE"&data2018$DEP!="LPA"&data2018$DEP!="TFS"&data2018$TOT.DEL.ARR>="02:00"),]
flightsType1 <- data2018[(data2018$DEP!="ACE"
&data2018$DEP!="FUE"
&data2018$DEP!="LPA"
&data2018$DEP!="TFS"
&data2018$ARR!="ACE"
&data2018$ARR!="FUE"
&data2018$ARR!="LPA"
&data2018$ARR!="TFS"
&data2018$TOT.DEL.ARR>="02:00"),]
passengersType1 <- sum(flightsType1$PAX)
passengersType1 <- sum(flightsType1$PAX)
passengersType1 <- sum(as.numeric(flightsType1$PAX))
flightsType1 <- na.omit(flightsType1$PAX)
passengersType1 <- sum(as.numeric(flightsType1$PAX))
passengersType1 <- sum(as.numeric(flightsType1))
flightsType1 <- flightsType1[flightsType1$PAX>=0,]
flightsType1 <- data2018[(data2018$DEP!="ACE"
&data2018$DEP!="FUE"
&data2018$DEP!="LPA"
&data2018$DEP!="TFS"
&data2018$ARR!="ACE"
&data2018$ARR!="FUE"
&data2018$ARR!="LPA"
&data2018$ARR!="TFS"
&data2018$TOT.DEL.ARR>="02:00"),]
flightsType1 <- flightsType1[flightsType1$PAX>=0,]
passengersType1 <- sum(as.numeric(flightsType1))
passengersType1 <- sum(flightsType1$PAX)
passengersType1 <- sum(as.numeric(flightsType1$PAX)
passengersType1 <- sum(as.numeric(flightsType1$PAX))
passengersType1 <- sum(as.numeric(flightsType1$PAX))
flightsType1 <- data2018[(data2018$DEP!="ACE"
&&data2018$DEP!="FUE"
&&data2018$DEP!="LPA"
&&data2018$DEP!="TFS"
&&data2018$ARR!="ACE"
&&data2018$ARR!="FUE"
&&data2018$ARR!="LPA"
&&data2018$ARR!="TFS"
&&data2018$TOT.DEL.ARR>="02:00"),]
flightsType1 <- data2018[(data2018$DEP!="ACE"
&data2018$DEP!="FUE"
&data2018$DEP!="LPA"
&data2018$DEP!="TFS"
&data2018$ARR!="ACE"
&data2018$ARR!="FUE"
&data2018$ARR!="LPA"
&data2018$ARR!="TFS"
&data2018$TOT.DEL.ARR>="02:00"),]
flightsType1 <- data2018[(data2018$DEP!="ACE"
&data2018$DEP!="FUE"
&data2018$DEP!="LPA"
&data2018$DEP!="TFS"
&data2018$ARR!="ACE"
&data2018$ARR!="FUE"
&data2018$ARR!="LPA"
&data2018$ARR!="TFS"
&&data2018$TOT.DEL.ARR>="02:00"),]
flightsType1 <- data2018[(data2018$DEP!="ACE"
&&data2018$DEP!="FUE"
&&data2018$DEP!="LPA"
&&data2018$DEP!="TFS"
&&data2018$ARR!="ACE"
&&data2018$ARR!="FUE"
&&data2018$ARR!="LPA"
&&data2018$ARR!="TFS"
&data2018$TOT.DEL.ARR>="02:00"),]
flightsType1 <- data2018[(
data2018$TOT.DEL.ARR>="02:00"),]
flightsType2 <- data2018[(data2018$DEP=="ACE"
|data2018$DEP=="FUE"
|data2018$DEP=="LPA"
|data2018$DEP=="TFS"
|data2018$ARR=="ACE"
|data2018$ARR=="FUE"
|data2018$ARR=="LPA"
|data2018$ARR=="TFS"
|data2018$TOT.DEL.ARR>="03:00"),]
getwd()
source('~/GitHub/ieseDataSciProject/golf.r')
warnings()
source('~/GitHub/ieseDataSciProject/golf.r')
source('~/GitHub/ieseDataSciProject/golf.r')
View(players)
library("magrittr")
source('~/GitHub/ieseDataSciProject/golf.r')
#Loading libraries
library("XML")
library("rvest")
library("tidyverse")
library("stringr")
library("ggplot2")
# Initiate global variables
playersAllYears <- data.frame(
Year = numeric(),
Rank = numeric(),
ID = factor(),
Name = character(),
Country = factor(),
OfficialMoney = numeric(),
EventsPlayed = numeric()
)
#year <- seq(from = 2018, to = 2000, by = -1)
y <- c("2018")
url <- c('http://www.lpga.com/statistics/money/official-money?year=')
colTypes <- c("numeric","character","character","numeric")
#for (y in year) {
print(paste("Processing data for year",y))
# Defining working URL
tableURL <- paste(url,y,sep = "")
# Players' Table Text scraped
players <- readHTMLTable(tableURL, colClasses = colTypes, stringsAsFactors = FALSE, as.data.frame = TRUE, which = 1)
names(players)[3:4] <- c("OfficialMoney", "EventsPlayed")
str(players)
# Converting official money to numeric to enable analysis
players$`OfficialMoney`%<>% gsub("\\$|,","") %>%
as.numeric()
View(players)
# Identifying erroneous spacing in player profile links, fixing
if (str_detect(read_html(tableURL),"/players/.+ [a-z0-9/-]*>")){
print(paste("Errors identified in table of year", y,"... Fixing!"))
# Reading HTML nodes
golfHTML <- readLines(tableURL) %>%
sapply(str_replace, "(/players/.+) ([a-z0-9/-]*>)","\\1-\\2") %>%
paste(collapse = "") %>%
read_html()
} else {
golfHTML <- read_html(tableURL)
}
# Reading profile links
golfPlayersNodes <- html_nodes(golfHTML, xpath = "//tbody/tr/td[contains(@class, 'table-content left')]/a")
# Identifying missing link attributes
missingProfileLinks <- html_attrs(golfPlayersNodes) %>%
sapply(is_empty) %>%
which()-1
# Extracting player ID
playersID <- html_attrs(golfPlayersNodes) %>%
unlist() %>%
strsplit("/") %>%
unlist() %>%
matrix(nrow=length(), byrow = TRUE) [,4]
# Extracting player ID
playersID <- html_attrs(golfPlayersNodes) %>%
unlist() %>%
strsplit("/") %>%
unlist() %>%
matrix(nrow=length(golfPlayersNodes), byrow = TRUE) [,4]
dim(golfPlayersNodes)
length(golfPlayersNodes)
source('~/GitHub/ieseDataSciProject/golf.r')
# Adding NAs for missing profiles
for (i in missingProfileLinks){
playersID %<>% append(., NA, after = i)
}
source('~/GitHub/ieseDataSciProject/golf.r')
# Adding NAs for missing profiles
for (i in missingProfileLinks){
playersID %<>% append(., NA, after = i)
}
source('~/GitHub/ieseDataSciProject/golf.r')
View(players)
source('~/GitHub/ieseDataSciProject/golf.r')
source('~/GitHub/ieseDataSciProject/golf.r')
View(players)
length(golfPlayersNodes)
# Extracting player ID
playersID <- html_attrs(golfPlayersNodes) %>%
unlist() %>%
strsplit(.,"/") %>%
unlist() %>%
matrix(.,nrow=length(golfPlayersNodes), byrow = TRUE) [,4]
html_attrs(golfPlayersNodes)
unlist(html_attrs(golfPlayersNodes))
strsplit(unlist(html_attrs(golfPlayersNodes)),"/")
unlist(strsplit(unlist(html_attrs(golfPlayersNodes)),"/"))
matrix(unlist(strsplit(unlist(html_attrs(golfPlayersNodes)),"/")), nrow = length(golfPlayersNodes), byrow = TRUE)
length(unlist(html_attrs(golfPlayersNodes)))
source('~/GitHub/ieseDataSciProject/golf.r')
length(golfPlayersNodes) - length(missingProfileLinks)
source('~/GitHub/ieseDataSciProject/golf.r')
source('~/GitHub/ieseDataSciProject/golf.r')
matrix(unlist(strsplit(unlist(html_attrs(golfPlayersNodes)),"/")), nrow = length(golfPlayersNodes), byrow = TRUE)
matrix(unlist(strsplit(unlist(html_attrs(golfPlayersNodes)),"/")), nrow = length(golfPlayersNodes)-length(missingProfileLinks), byrow = TRUE)
source('~/GitHub/ieseDataSciProject/golf.r')
source('~/GitHub/ieseDataSciProject/golf.r')
source('~/GitHub/ieseDataSciProject/golf.r')
source('~/GitHub/ieseDataSciProject/golf.r')
source('~/GitHub/ieseDataSciProject/golf.r')
source('~/GitHub/ieseDataSciProject/golf.r')
source('~/GitHub/ieseDataSciTwitterProject/twitterAir.r')
tweets <- search_tweets(paste("@","united"," OR ", "#", "united", sep = ""), n=1000,
lang = "en", geocode = lookup_coords("USA"),include_rts = FALSE)
View(tweets)
?search_tweets
# Getting tweet for airline
getAirlineTweets <- function(i){
tweets <- search_tweets(paste("@",i," OR ", "#", i, sep = ""),
fromDate = as.Date("2018-12-20"), toDate = as.Date("2019-05-20"),
lang = "en", geocode = lookup_coords("USA"),include_rts = FALSE)
return(tweets[,c("user_id", "status_id", "created_at", "text", "favorite_count",
"retweet_count", "hashtags", "symbols")])
}
airlineTweets <- sapply(airlines, getAirlineTweets, USE.NAMES = TRUE)
View(airlineTweets)
source('~/GitHub/ieseDataSciTwitterProject/twitterAir.r')
View(airlineTweets)
# Getting tweet for airline
getAirlineTweets <- function(i){
tweets <- search_tweets(paste("@",i," OR ", "#", i, sep = ""), n=1000,
fromDate = as.Date("2018-12-20"), toDate = as.Date("2019-05-20"),
lang = "en", geocode = lookup_coords("USA"),include_rts = FALSE)
return(tweets[,c("user_id", "status_id", "created_at", "text", "favorite_count",
"retweet_count", "hashtags", "symbols")])
}
airlineTweets <- sapply(airlines, getAirlineTweets, USE.NAMES = TRUE)
View(airlineTweets)
tweets <- search_tweets(paste("@","united"," OR ", "#", "united", sep = ""), n=1000,
lang = "en", geocode = lookup_coords("USA"),include_rts = FALSE)
View(tweets)
tweets <- tweets[,c("user_id", "status_id", "created_at", "text", "favorite_count", "retweet_count", "hashtags", "symbols")]
View(airlineTweets)
View(tweets)
# Getting tweet for airline
getAirlineTweets <- function(i){
tweets <- search_tweets(paste("@",i," OR ", "#", i, sep = ""), n=100,
lang = "en", geocode = lookup_coords("USA"),include_rts = FALSE)
return(tweets[,c("user_id", "status_id", "created_at", "text", "favorite_count", "retweet_count", "hashtags", "symbols")])
}
airlineTweets <- sapply(airlines, getAirlineTweets, USE.NAMES = TRUE)
airlineTweets <- sapply(airlines, getAirlineTweets)
airlineTweets <- sapply(airlines, getAirlineTweets, USE.NAMES = TRUE)
airlineTweets <- lapply(airlines, getAirlineTweets, USE.NAMES = TRUE)
?lapply
class(tweets)
airlineTweets <- list(sapply(airlines, getAirlineTweets, USE.NAMES = TRUE))
View(airlineTweets)
# Getting tweet for airline
getAirlineTweets <- function(i){
tweets <- search_tweets(paste("@",i," OR ", "#", i, sep = ""), n=100,
lang = "en", geocode = lookup_coords("USA"),include_rts = FALSE)
name(tweets) <- i
return(tweets[,c("user_id", "status_id", "created_at", "text", "favorite_count", "retweet_count", "hashtags", "symbols")])
}
airlineTweets <- sapply(airlines, getAirlineTweets)
?name
# Getting tweet for airline
getAirlineTweets <- function(i){
tweets <- search_tweets(paste("@",i," OR ", "#", i, sep = ""), n=100,
lang = "en", geocode = lookup_coords("USA"),include_rts = FALSE)
names(tweets) <- i
return(tweets[,c("user_id", "status_id", "created_at", "text", "favorite_count", "retweet_count", "hashtags", "symbols")])
}
airlineTweets <- sapply(airlines, getAirlineTweets)
# Getting tweet for airline
getAirlineTweets <- function(i){
tweets <- search_tweets(paste("@",i," OR ", "#", i, sep = ""), n=100,
lang = "en", geocode = lookup_coords("USA"),include_rts = FALSE)
return(tweets[,c("user_id", "status_id", "created_at", "text", "favorite_count", "retweet_count", "hashtags", "symbols")])
}
airlineTweets <- sapply(airlines, getAirlineTweets)
View(airlineTweets)
View(airlineTweets)
dim(airlineTweets)
?sapply
airlineTweets <- sapply(airlines, getAirlineTweets, USE.NAMES = TRUE)
names(airlineTweets)
row.names(airlineTweets)
colnames(airlineTweets)
airlineTweets <- lapply(airlines, getAirlineTweets)
View(airlineTweets)
airlineTweets <- lapply(airlines, getAirlineTweets) %>%
data.frame()
names(airlineTweets)
str(airlineTweets)
summary(airlineTweets)
names(airlineTweets) <- airlines
summary(airlineTweets)
View(airlineTweets)
View(airlineTweets)
# Getting tweet for airline
getAirlineTweets <- function(i){
tweets <- search_tweets(paste("@",i," OR ", "#", i, sep = ""), n=1000,
lang = "en", geocode = lookup_coords("USA"),include_rts = FALSE)
return(tweets[,c("user_id", "status_id", "created_at", "text", "favorite_count", "retweet_count", "hashtags", "symbols")])
}
airlineTweets <- lapply(airlines, getAirlineTweets)
View(airlineTweets)
names(airlineTweets) <- airlines
View(airlineTweets)
min(airlineTweets["created_at"])
min(airlineTweets[[]]["created_at"])
min(airlineTweets[[1:10]]["created_at"])
sapply(airlineTweets,min())
sapply(airlineTweets,min("created_at"))
min(airlineTweets$united$created_at)
for(i in airlines) {min(airlineTweets$i$created_at)}
for(i in airlines) {min(airlineTweets[[i]]$created_at)}
for(i in airlines) {return(min(airlineTweets[[i]]$created_at))}
min(airlineTweets[["united"]]$created_at))
min(airlineTweets[["united"]]$created_at)
for(i in airlines) {return(min(airlineTweets[[i]]$created_at))}
for(i in airlines) {print(min(airlineTweets[[i]]$created_at))}
# Getting tweet for airline
getAirlineTweets <- function(i){
tweets <- search_tweets(paste("@",i," OR ", "#", i, sep = ""), n=10000,
lang = "en", geocode = lookup_coords("USA"),include_rts = FALSE)
return(tweets[,c("user_id", "status_id", "created_at", "text", "favorite_count", "retweet_count", "hashtags", "symbols")])
}
airlineTweets <- lapply(airlines, getAirlineTweets)
source('~/GitHub/ieseDataSciTwitterProject/twitterAir.r')
source('~/GitHub/ieseDataSciTwitterProject/twitterAir.r')
View(airlineTweets)
for(i in airlines) {print(min(airlineTweets[[i]]$created_at))}
saveRDS(airlineTweets, file = "airlineTweets.rds")
dir()
# Sentiment analysis using Twitter data of US airlines
setwd("~/Github/ieseDataSciTwitterProject")
saveRDS(airlineTweets, file = "airlineTweets.rds")
